#!/bin/bash
######################################################################
# RITCHIE LAB BATCH JOB TEMPLATE
#
# Make a copy of this file to edit for your job. To enable an option,
# remove the extra "#-" prefix (change "#-#BSUB ..." to "#BSUB ...").
# Submit the job by piping it into the "bsub" command, as in
#   cat myjob.bsub | bsub
# or
#   bsub < myjob.bsub
######################################################################

#BSUB -J "run.predict"
# Job name and (optional) job array properties, in the format
#   "jobname"
# for a simple job, or
#   "jobname[min-max:step]%limit"
# for an array job, where
#   'jobname' is the label shown in job status and summary displays
#   'min' is the first array index
#   'max' is the last array index
#   'step' is the step value between array indecies
#   'limit' is the number of array sub-jobs that can run at once
# In an array job, the variable $LSB_JOBINDEX will contain the index
# of the current sub-job.

#BSUB -o bsub.%J-%I.out
# Filename to append the job's stdout; change to -oo to overwrite.
# '%J' becomes the job ID number, '%I' becomes the array index.

#BSUB -e bsub.%J-%I.err
# Filename to append the job's stderr; change to -eo to overwrite.
# If omitted, stderr is combined with stdout.

#-#BSUB -B
# Send email notification when the job starts.

#-#BSUB -N
# Send email notification when the job finishes;
# otherwise, summary is written to the output file.

#BSUB -R "rusage[mem=10000]"
# Per-process memory reservation, in MB.
# (Ensures the job will have this minimum memory.)

#BSUB -M 100000
# Per-process memory limit, in MB.
# (Ensures the job will not exceed this maximum memory.)

#-#BSUB -v 128
# Total process virtual (swap) memory limit, in MB.

#BSUB -W 24:00
# Wall time limit, in the format "hours:minutes".

#-#BSUB -n 1
# Number of cores to reserve (on one or more hosts; see below).
# The variable $LSB_HOSTS lists allocated hosts like "hostA hostA hostB";
# the variable $LSB_MCPU_HOSTS lists allocated hosts like "hostA 2 hostB 1".

#-#BSUB -R "span[hosts=1]"
# Require all cores to be on the same host (for multi-threaded, non-MPI).

#-#BSUB -R "span[ptile=1]"
# Maximum number of cores to reserve on each host (for MPI).

#BSUB -R "select[ostype>=CENT7]"
# Require that the job runs on CentOS 7 host(s).

#BSUB -R 'select[hname!=lambda25]'
######################################################################
# RITCHIE LAB BATCH ENVIRONMENT CONFIG
#
# This ensures the job runs with the expected lab environment, even
# if it's submitted from a non-fully-supported host (i.e. CentOS6).
######################################################################

if test "${HOME}/ritchielab.bashrc" -nt "${HOME}/group/ritchielab.bashrc" ; then
        . "${HOME}/ritchielab.bashrc"
elif test -f "${HOME}/group/ritchielab.bashrc" ; then
        . "${HOME}/group/ritchielab.bashrc"
else
        echo "WARNING: Could not find Ritchie Lab bashrc group environment script."
fi

######################################################################
# JOB COMMANDS
#
# Put your commands below. The script will run in the directory you
# submit it from, not (necessarily) the directory the script is in.
######################################################################
##SET UP ENVIRONMENT

module load python
module load singularity
#singularity shell -B /project /project/ritchie/projects/CodeWorks_Projects/metaxcan.sif

tissues=('ARIC_EA_hg38' 'ARIC_AA_hg38')

METAXCAN=/project/ritchie/personal/amoore/ADSP/ALZ_TWAS/MetaXcan/software 
DATA=/project/ritchie/personal/amoore/ADSP/ALZ_TWAS 
RESULTS=/project/ritchie/personal/rasika/AD_WAS/ADSP_PWAS/output
MODEL=/project/ritchie/personal/rasika/AD_WAS/ADSP_PWAS/PCAIR_Models

export METAXCAN=/project/ritchie/personal/amoore/ADSP/ALZ_TWAS/MetaXcan/software
export DATA=/project/ritchie/personal/amoore/ADSP/ALZ_TWAS
export RESULTS=/project/ritchie/personal/rasika/AD_WAS/ADSP_PWAS/output
export MODEL=/project/ritchie/personal/rasika/AD_WAS/ADSP_PWAS/ARIC_Models

printf "Predict expression\n"

for tissue in "${tissues[@]}"; do singularity exec -B /project /project/ritchie/projects/CodeWorks_Projects/metaxcan.sif /opt/conda/bin/python /app/MetaXcan/software/Predict.py \
--model_db_path $MODEL/ARIC-selected/${tissue}.db \
--model_db_snp_key varID \
--vcf_genotypes $DATA/Genotypes/v11/ADSP_mac20_noduplicates_geno0.01_mind0.05_maf0.01_hwe1-8_snps_chrALL_remove_relateds_cohorts.vcf \
--vcf_mode genotyped \
--on_the_fly_mapping METADATA "chr{}_{}_{}_{}_b38" \
--prediction_output $RESULTS/ADSP_${tissue}_ARIC_predict.maf01.geno01.hwe1-8.snps.v11.txt \
--prediction_summary_output $RESULTS/ADSP_${tissue}_ARIC_predict.maf01.geno01.hwe1-8.snps.v11.summary.txt \
--verbosity 9 \
--throw; done

#singularity exec -B /project ./metaxcan.sif /opt/conda/bin/python /app/MetaXcan/software/Predict.py  \
#--model_db_path $DATA/eqtl/mashr/mashr_${tissues[$FILE_IDX]}.db \
#--model_db_snp_key varID \
#--vcf_genotypes $DATA/Genotypes/ADSP_mac20_noduplicates_maf0.01_chrALL.geno01.hwe1-10.snps.vcf \
#--vcf_mode genotyped \
#--on_the_fly_mapping METADATA "chr{}_{}_{}_{}_b38" \
#--prediction_output $RESULTS/ADSP_${tissues[$FILE_IDX]}_predict.maf01.geno01.hwe1-10.snps.txt \
#--prediction_summary_output $RESULTS/ADSP_${tissues[$FILE_IDX]}_predict.maf01.geno01.hwe1-10.snps.summary.txt \
#--verbosity 9 \